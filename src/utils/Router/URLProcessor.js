/**
 * Данный класс используется для проверки URL, добавляемого в роутер.
 * URL должен отвечать следующим критериям:
 * 1. Начинаться с "/".
 * 2. После начального "/" следует имя url - латинские символы и цифры
 * 3.
 */
class URLTemplateValidator {
    /**
     * Валидирует переданный url. Резуьтаты проверки и сообщение,
     * в случае не пройденной валидации, доступны в полях.
     * @param {string} url - проверяемый url
     */
    constructor(url) {

    }
}

/**
 * Класс выполняет проверку и парсинг данных из url, согласно переданным в конструкторе паттернам.
 * Результаты проверки и данные доступны в соответствующих полях.
 */
class URLProcessor {
    /**
     * Конструирует объект URLProcessor'a. На вход принимает список паттернов.
     * Считается, что паттерны валидны (их стоит передавать из роутера).
     * @param {string} patterns - список паттернов
     */
    constructor(patterns) {
        // Сплитим паттерны в спец. структурку
        // name часть паттерна
        // matches часть паттерна
    }

    /**
     * Обрабатывает переданный url.
     * - Проверяет валиден ли url (соотв. ли он какомому либо паттерну из patterns).
     * Считается что patterns сформированы правильно (их следует передавать из роутера).
     * - Берет первый подходящий паттерн и пытается извлечь значения.
     * @param {string} url - url для обработки
     */
    process(url) {
        // Очищаем URL от все возможного мусора
        // Для каждого паттерна из patterns проверяем, стартует ли url с какой-либо name части.
        // Да - работаем дальше. Нет - выставляем в невалидное состояние.
        // Отсекаем часть урла соотв. name части. Сплитим по слешу отсальные части url.
        // Проверяем каждую оставшуюся часть на соответствие соотв. match элемента.
        // Если что-то не проходит - не валидное состояние. Каждый ОК блок урла записываем в поле данных.
        // Отмечаем что состояние валидное и можно работать далее, брать данные.
    }
}
